buildscript {
  if ("$gradle.gradleVersion" != "6.3") {
    throw new GradleException("Gradle version 6.3 is required (received $gradle.gradleVersion)")
  }

  ext.kotlin_version = "1.3.72"

  repositories {
    mavenLocal()
    mavenCentral()
    google()
    jcenter()
  }

  dependencies {
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.1.1"
    classpath "digital.wup:android-maven-publish:3.6.3"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "com.android.tools.build:gradle:4.0.1"
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.27.0"
  id "digital.wup.android-maven-publish" version "3.6.3"
  id "ru.vyarus.animalsniffer" version "1.5.1"
}

ext {
  androidCompileSDKVersion = 28
  androidMinimumSDKVersion = 21
  androidTargetSDKVersion = 28

  if (!project.hasProperty("nexusUsername")) {
    logger.warn("No nexusUsername property specified: Using an empty value")
    nexusUsername = ""
  }
  if (!project.hasProperty("nexusPassword")) {
    logger.warn("No nexusPassword property specified: Using an empty value")
    nexusPassword = ""
  }

  if (!project.hasProperty("org.librarysimplified.nexus.publish")) {
    logger.warn("org.librarysimplified.nexus.publish is not set: We will publish artifacts to Maven Central")
    useNYPLNexusPublish = false
  } else {
    logger.warn("org.librarysimplified.nexus.publish is set: We will publish artifacts to the NYPL Nexus")
    useNYPLNexusPublish = true
  }

  if (!project.hasProperty("org.librarysimplified.nexus.depend")) {
    logger.warn("org.librarysimplified.nexus.depend is not set: We will not depend on artifacts on the NYPL Nexus")
    useNYPLNexusDepend = false
  } else {
    logger.warn("org.librarysimplified.nexus.depend is set: We will depend on artifacts on the NYPL Nexus")
    useNYPLNexusDepend = true
  }

  if (project.hasProperty("org.librarysimplified.directory.publish")) {
    useDirectoryPublishPath = project.property("org.librarysimplified.directory.publish")
    useDirectoryPublish = true
    logger.warn("org.librarysimplified.directory.publish is set: We will publish artifacts to ${useDirectoryPublishPath}")
  } else {
    logger.warn("org.librarysimplified.directory.publish is not set: We will not publish artifacts to a custom directory")
    useDirectoryPublish = false
    useDirectoryPublishPath = null
  }
}

ext.libraries = [
  androidXAnnotation        : "androidx.annotation:annotation:1.1.0",
  androidXAppCompat         : "androidx.appcompat:appcompat:1.2.0-rc01",
  androidXConstraintLayout  : "androidx.constraintlayout:constraintlayout:1.1.3",
  androidXCore              : "androidx.core:core:1.1.0",
  androidXFragmentTesting   : "androidx.fragment:fragment-testing:1.1.0",
  androidXLifecycle         : "androidx.lifecycle:lifecycle-extensions:2.1.0",
  androidXLifecycleViewmodel: "androidx.lifecycle:lifecycle-viewmodel:2.1.0",
  androidXMultidex          : "androidx.multidex:multidex:2.0.0",
  androidXRecyclerView      : "androidx.recyclerview:recyclerview:1.1.0-beta05",
  androidXTestEspressoCore  : "androidx.test.espresso:espresso-core:3.1.0",
  androidXTestExtensions    : "androidx.test.ext:junit:1.1.1",
  androidXTestOrchestrator  : "androidx.test:orchestrator:1.1.0",
  androidXTestRules         : "androidx.test:rules:1.1.0",
  androidXTestRunner        : "androidx.test:runner:1.1.0",
  androidXViewPager2        : "androidx.viewpager2:viewpager2:1.0.0",
  googleGuava               : "com.google.guava:guava:23.6.1-android",
  googleMaterial            : "com.google.android.material:material:1.1.0",
  jodaTime                  : "joda-time:joda-time:2.10.6",
  kotlinStdlib              : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
  kotlinCoroutines          : "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7",
  logbackAndroidClassic     : "com.github.tony19:logback-android-classic:1.1.1-6",
  logbackAndroidCore        : "com.github.tony19:logback-android-core:1.1.1-6",
  logbackClassic            : "ch.qos.logback:logback-classic:1.2.3",
  mockitoAndroid            : "org.mockito:mockito-android:2.22.0",
  nanoHTTPD                 : "com.github.edrlab.nanohttpd:nanohttpd:master-SNAPSHOT",
  nanoHTTPDNanolets         : "com.github.edrlab.nanohttpd:nanohttpd-nanolets:master-SNAPSHOT",
  r2Shared                  : "com.github.qnga:r2-shared-kotlin:nypl-SNAPSHOT",
  r2Streamer                : "com.github.qnga:r2-streamer-kotlin:nypl-SNAPSHOT",
  rxjava2                   : "io.reactivex.rxjava2:rxjava:2.1.13",
  slf4j                     : "org.slf4j:slf4j-api:1.7.25",
]

allprojects {
  group = project.ext["GROUP"]
  version = project.ext["VERSION_NAME"]
}

// Add ktlint tasks to all subprojects

subprojects { project ->
  apply from: file("$rootDir/ktlint.gradle")
}

subprojects { project ->

  switch (POM_PACKAGING) {
    case "jar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as jar project")

      apply plugin: "java"
      apply plugin: "java-library"
      apply plugin: "kotlin"

      /*
       * Apply the Animal Sniffer plugin to check that code is Android compatible.
       */

      apply plugin: "ru.vyarus.animalsniffer"

      dependencies {
        signature "org.codehaus.mojo.signature:java16:1.1@signature"
        signature "net.sf.androidscents.signature:android-api-level-14:4.0_r4@signature"
      }

      /*
       * Build an OSGi bundle.
       */

      apply plugin: "biz.aQute.bnd.builder"

      jar {
        bnd """
Automatic-Module-Name: ${POM_AUTOMATIC_MODULE_NAME}

-removeheaders: Bnd-LastModified, Tool, Private-Package
"""
      }
      break

    case "apk":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android application project")

      apply plugin: "com.android.application"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
        }
        compileOptions {
          encoding 'UTF-8'
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
      }
      break

    case "aar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android library project")

      apply plugin: "com.android.library"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion

        defaultConfig {
          multiDexEnabled true
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
          testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
          useLibrary 'org.apache.http.legacy'
        }
        compileOptions {
          encoding 'UTF-8'
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        testOptions {
          execution 'ANDROIDX_TEST_ORCHESTRATOR'
          animationsDisabled = true
        }
      }
      break

    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  task javadocsJar(type: Jar) {
    classifier = "javadoc"
  }

  task sourcesJar(type: Jar) {
    classifier = "sources"
    from "src/main/java", "src/main/resources"
  }

  repositories {
    mavenLocal()
    mavenCentral()

    if (useNYPLNexusDepend) {
      maven {
        credentials {
          username findProperty("org.librarysimplified.nexus.username")
          password findProperty("org.librarysimplified.nexus.password")
        }
        url "https://nexus.librarysimplified.org:8443/nexus/content/groups/external/"
      }
    }

    maven { url "https://jitpack.io" }
    jcenter()
    google()
  }
}

// Configure publishing for appropriate projects

subprojects { project ->
  pluginManager.withPlugin("java") {
    println("Configuring publishing for ${project} (${POM_PACKAGING})")
    apply from: file("$rootDir/publishing.gradle")
  }
  pluginManager.withPlugin("com.android.library") {
    println("Configuring publishing for ${project} (${POM_PACKAGING})")
    apply from: file("$rootDir/publishing.gradle")
  }
}

// Add ktlint tasks to root project. This executes faster than configuring
// the tasks for each subproject individually.

apply from: file("$rootDir/ktlint.gradle")
